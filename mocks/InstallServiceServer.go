// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/jdfalk/ubuntu-autoinstall-webhook/pkg/proto"
	mock "github.com/stretchr/testify/mock"
)

// InstallServiceServer is an autogenerated mock type for the InstallServiceServer type
type InstallServiceServer struct {
	mock.Mock
}

type InstallServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *InstallServiceServer) EXPECT() *InstallServiceServer_Expecter {
	return &InstallServiceServer_Expecter{mock: &_m.Mock}
}

// ReportStatus provides a mock function with given fields: _a0, _a1
func (_m *InstallServiceServer) ReportStatus(_a0 context.Context, _a1 *proto.StatusRequest) (*proto.StatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ReportStatus")
	}

	var r0 *proto.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatusRequest) (*proto.StatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatusRequest) *proto.StatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.StatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallServiceServer_ReportStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportStatus'
type InstallServiceServer_ReportStatus_Call struct {
	*mock.Call
}

// ReportStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.StatusRequest
func (_e *InstallServiceServer_Expecter) ReportStatus(_a0 interface{}, _a1 interface{}) *InstallServiceServer_ReportStatus_Call {
	return &InstallServiceServer_ReportStatus_Call{Call: _e.mock.On("ReportStatus", _a0, _a1)}
}

func (_c *InstallServiceServer_ReportStatus_Call) Run(run func(_a0 context.Context, _a1 *proto.StatusRequest)) *InstallServiceServer_ReportStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.StatusRequest))
	})
	return _c
}

func (_c *InstallServiceServer_ReportStatus_Call) Return(_a0 *proto.StatusResponse, _a1 error) *InstallServiceServer_ReportStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstallServiceServer_ReportStatus_Call) RunAndReturn(run func(context.Context, *proto.StatusRequest) (*proto.StatusResponse, error)) *InstallServiceServer_ReportStatus_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedInstallServiceServer provides a mock function with no fields
func (_m *InstallServiceServer) mustEmbedUnimplementedInstallServiceServer() {
	_m.Called()
}

// InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedInstallServiceServer'
type InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedInstallServiceServer is a helper method to define mock.On call
func (_e *InstallServiceServer_Expecter) mustEmbedUnimplementedInstallServiceServer() *InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call {
	return &InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedInstallServiceServer")}
}

func (_c *InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call) Run(run func()) *InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call) Return() *InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call) RunAndReturn(run func()) *InstallServiceServer_mustEmbedUnimplementedInstallServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewInstallServiceServer creates a new instance of InstallServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstallServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *InstallServiceServer {
	mock := &InstallServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
