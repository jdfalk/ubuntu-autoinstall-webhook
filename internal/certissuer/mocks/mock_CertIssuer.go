// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockCertIssuer is an autogenerated mock type for the CertIssuer type
type MockCertIssuer struct {
	mock.Mock
}

type MockCertIssuer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCertIssuer) EXPECT() *MockCertIssuer_Expecter {
	return &MockCertIssuer_Expecter{mock: &_m.Mock}
}

// GetRootCA provides a mock function with no fields
func (_m *MockCertIssuer) GetRootCA() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRootCA")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertIssuer_GetRootCA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootCA'
type MockCertIssuer_GetRootCA_Call struct {
	*mock.Call
}

// GetRootCA is a helper method to define mock.On call
func (_e *MockCertIssuer_Expecter) GetRootCA() *MockCertIssuer_GetRootCA_Call {
	return &MockCertIssuer_GetRootCA_Call{Call: _e.mock.On("GetRootCA")}
}

func (_c *MockCertIssuer_GetRootCA_Call) Run(run func()) *MockCertIssuer_GetRootCA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCertIssuer_GetRootCA_Call) Return(_a0 []byte, _a1 error) *MockCertIssuer_GetRootCA_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCertIssuer_GetRootCA_Call) RunAndReturn(run func() ([]byte, error)) *MockCertIssuer_GetRootCA_Call {
	_c.Call.Return(run)
	return _c
}

// IssueCertificate provides a mock function with given fields: csr, clientInfo
func (_m *MockCertIssuer) IssueCertificate(csr []byte, clientInfo map[string]string) ([]byte, error) {
	ret := _m.Called(csr, clientInfo)

	if len(ret) == 0 {
		panic("no return value specified for IssueCertificate")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, map[string]string) ([]byte, error)); ok {
		return rf(csr, clientInfo)
	}
	if rf, ok := ret.Get(0).(func([]byte, map[string]string) []byte); ok {
		r0 = rf(csr, clientInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, map[string]string) error); ok {
		r1 = rf(csr, clientInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertIssuer_IssueCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueCertificate'
type MockCertIssuer_IssueCertificate_Call struct {
	*mock.Call
}

// IssueCertificate is a helper method to define mock.On call
//   - csr []byte
//   - clientInfo map[string]string
func (_e *MockCertIssuer_Expecter) IssueCertificate(csr interface{}, clientInfo interface{}) *MockCertIssuer_IssueCertificate_Call {
	return &MockCertIssuer_IssueCertificate_Call{Call: _e.mock.On("IssueCertificate", csr, clientInfo)}
}

func (_c *MockCertIssuer_IssueCertificate_Call) Run(run func(csr []byte, clientInfo map[string]string)) *MockCertIssuer_IssueCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(map[string]string))
	})
	return _c
}

func (_c *MockCertIssuer_IssueCertificate_Call) Return(_a0 []byte, _a1 error) *MockCertIssuer_IssueCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCertIssuer_IssueCertificate_Call) RunAndReturn(run func([]byte, map[string]string) ([]byte, error)) *MockCertIssuer_IssueCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// RenewCertificate provides a mock function with given fields: cert
func (_m *MockCertIssuer) RenewCertificate(cert []byte) ([]byte, error) {
	ret := _m.Called(cert)

	if len(ret) == 0 {
		panic("no return value specified for RenewCertificate")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(cert)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(cert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(cert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertIssuer_RenewCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenewCertificate'
type MockCertIssuer_RenewCertificate_Call struct {
	*mock.Call
}

// RenewCertificate is a helper method to define mock.On call
//   - cert []byte
func (_e *MockCertIssuer_Expecter) RenewCertificate(cert interface{}) *MockCertIssuer_RenewCertificate_Call {
	return &MockCertIssuer_RenewCertificate_Call{Call: _e.mock.On("RenewCertificate", cert)}
}

func (_c *MockCertIssuer_RenewCertificate_Call) Run(run func(cert []byte)) *MockCertIssuer_RenewCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockCertIssuer_RenewCertificate_Call) Return(_a0 []byte, _a1 error) *MockCertIssuer_RenewCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCertIssuer_RenewCertificate_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockCertIssuer_RenewCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCertIssuer creates a new instance of MockCertIssuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCertIssuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCertIssuer {
	mock := &MockCertIssuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
