// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *MockDatabase) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockDatabase_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) Connect(ctx interface{}) *MockDatabase_Connect_Call {
	return &MockDatabase_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MockDatabase_Connect_Call) Run(run func(ctx context.Context)) *MockDatabase_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_Connect_Call) Return(_a0 error) *MockDatabase_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Connect_Call) RunAndReturn(run func(context.Context) error) *MockDatabase_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// InsertRecord provides a mock function with given fields: ctx, record
func (_m *MockDatabase) InsertRecord(ctx context.Context, record interface{}) error {
	ret := _m.Called(ctx, record)

	if len(ret) == 0 {
		panic("no return value specified for InsertRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_InsertRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertRecord'
type MockDatabase_InsertRecord_Call struct {
	*mock.Call
}

// InsertRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - record interface{}
func (_e *MockDatabase_Expecter) InsertRecord(ctx interface{}, record interface{}) *MockDatabase_InsertRecord_Call {
	return &MockDatabase_InsertRecord_Call{Call: _e.mock.On("InsertRecord", ctx, record)}
}

func (_c *MockDatabase_InsertRecord_Call) Run(run func(ctx context.Context, record interface{})) *MockDatabase_InsertRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_InsertRecord_Call) Return(_a0 error) *MockDatabase_InsertRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_InsertRecord_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockDatabase_InsertRecord_Call {
	_c.Call.Return(run)
	return _c
}

// MigrateSchema provides a mock function with given fields: ctx
func (_m *MockDatabase) MigrateSchema(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MigrateSchema")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_MigrateSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrateSchema'
type MockDatabase_MigrateSchema_Call struct {
	*mock.Call
}

// MigrateSchema is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) MigrateSchema(ctx interface{}) *MockDatabase_MigrateSchema_Call {
	return &MockDatabase_MigrateSchema_Call{Call: _e.mock.On("MigrateSchema", ctx)}
}

func (_c *MockDatabase_MigrateSchema_Call) Run(run func(ctx context.Context)) *MockDatabase_MigrateSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_MigrateSchema_Call) Return(_a0 error) *MockDatabase_MigrateSchema_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_MigrateSchema_Call) RunAndReturn(run func(context.Context) error) *MockDatabase_MigrateSchema_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, query, args
func (_m *MockDatabase) Query(ctx context.Context, query string, args ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) ([]interface{}, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) []interface{}); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabase_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockDatabase_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *MockDatabase_Query_Call {
	return &MockDatabase_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabase_Query_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDatabase_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabase_Query_Call) Return(_a0 []interface{}, _a1 error) *MockDatabase_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_Query_Call) RunAndReturn(run func(context.Context, string, ...interface{}) ([]interface{}, error)) *MockDatabase_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
