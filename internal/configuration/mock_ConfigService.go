// Code generated by mockery v2.53.0. DO NOT EDIT.

package configuration

import mock "github.com/stretchr/testify/mock"

// MockConfigService is an autogenerated mock type for the ConfigService type
type MockConfigService struct {
	mock.Mock
}

type MockConfigService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigService) EXPECT() *MockConfigService_Expecter {
	return &MockConfigService_Expecter{mock: &_m.Mock}
}

// GenerateTemplates provides a mock function with given fields: data
func (_m *MockConfigService) GenerateTemplates(data interface{}) (map[string][]byte, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTemplates")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (map[string][]byte, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(interface{}) map[string][]byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigService_GenerateTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTemplates'
type MockConfigService_GenerateTemplates_Call struct {
	*mock.Call
}

// GenerateTemplates is a helper method to define mock.On call
//   - data interface{}
func (_e *MockConfigService_Expecter) GenerateTemplates(data interface{}) *MockConfigService_GenerateTemplates_Call {
	return &MockConfigService_GenerateTemplates_Call{Call: _e.mock.On("GenerateTemplates", data)}
}

func (_c *MockConfigService_GenerateTemplates_Call) Run(run func(data interface{})) *MockConfigService_GenerateTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockConfigService_GenerateTemplates_Call) Return(_a0 map[string][]byte, _a1 error) *MockConfigService_GenerateTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigService_GenerateTemplates_Call) RunAndReturn(run func(interface{}) (map[string][]byte, error)) *MockConfigService_GenerateTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function with no fields
func (_m *MockConfigService) LoadConfig() (Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Config)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigService_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockConfigService_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *MockConfigService_Expecter) LoadConfig() *MockConfigService_LoadConfig_Call {
	return &MockConfigService_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *MockConfigService_LoadConfig_Call) Run(run func()) *MockConfigService_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigService_LoadConfig_Call) Return(_a0 Config, _a1 error) *MockConfigService_LoadConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigService_LoadConfig_Call) RunAndReturn(run func() (Config, error)) *MockConfigService_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateConfig provides a mock function with given fields: cfg
func (_m *MockConfigService) ValidateConfig(cfg Config) error {
	ret := _m.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Config) error); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigService_ValidateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfig'
type MockConfigService_ValidateConfig_Call struct {
	*mock.Call
}

// ValidateConfig is a helper method to define mock.On call
//   - cfg Config
func (_e *MockConfigService_Expecter) ValidateConfig(cfg interface{}) *MockConfigService_ValidateConfig_Call {
	return &MockConfigService_ValidateConfig_Call{Call: _e.mock.On("ValidateConfig", cfg)}
}

func (_c *MockConfigService_ValidateConfig_Call) Run(run func(cfg Config)) *MockConfigService_ValidateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Config))
	})
	return _c
}

func (_c *MockConfigService_ValidateConfig_Call) Return(_a0 error) *MockConfigService_ValidateConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigService_ValidateConfig_Call) RunAndReturn(run func(Config) error) *MockConfigService_ValidateConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WatchConfigUpdates provides a mock function with no fields
func (_m *MockConfigService) WatchConfigUpdates() (<-chan Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WatchConfigUpdates")
	}

	var r0 <-chan Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (<-chan Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() <-chan Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Config)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigService_WatchConfigUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchConfigUpdates'
type MockConfigService_WatchConfigUpdates_Call struct {
	*mock.Call
}

// WatchConfigUpdates is a helper method to define mock.On call
func (_e *MockConfigService_Expecter) WatchConfigUpdates() *MockConfigService_WatchConfigUpdates_Call {
	return &MockConfigService_WatchConfigUpdates_Call{Call: _e.mock.On("WatchConfigUpdates")}
}

func (_c *MockConfigService_WatchConfigUpdates_Call) Run(run func()) *MockConfigService_WatchConfigUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigService_WatchConfigUpdates_Call) Return(_a0 <-chan Config, _a1 error) *MockConfigService_WatchConfigUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigService_WatchConfigUpdates_Call) RunAndReturn(run func() (<-chan Config, error)) *MockConfigService_WatchConfigUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigService creates a new instance of MockConfigService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigService {
	mock := &MockConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
