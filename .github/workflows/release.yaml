name: Build, Release, and Attest

on:
  workflow_dispatch:
  push:
    branches:
      - main
  release:
    types: [created]

permissions:
  contents: write
  packages: write
  id-token: write  # Required for Sigstore Cosign

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24'
          cache: true

      - name: Install Dependencies
        run: go mod tidy

      - name: Lint Code
        run: golangci-lint run

      - name: Generate Mocks
        run: go generate ./...

      - name: Run Tests
        run: go test -v ./...

      - name: Generate Code Coverage
        run: go test -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Build Binary
        run: |
          mkdir -p dist
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/webhook-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.run_id }} .

      - name: Upload Binaries as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.run_id }}
          path: dist/
          if-no-files-found: ignore

  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Built Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
          path: dist/

      - name: Publish Release Binaries
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.0.1"

      - name: Install Syft (for SBOM)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM for Binaries
        run: |
          mkdir -p sbom
          for file in dist/*; do
            syft $file -o spdx-json > sbom/$(basename $file).spdx.json
          done

      - name: Publish Release Binaries
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*

      - name: Sign Binaries with Cosign
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io --username $GITHUB_ACTOR --password-stdin
          for file in dist/*; do
            cosign sign --yes $file
          done

      - name: Attest Binaries with Provenance
        run: |
          for file in dist/*; do
            cosign attest --predicate provenance.json --type custom --yes $file
          done

      - name: Attest Binaries with SBOM
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io --username $GITHUB_ACTOR --password-stdin
          for sbom in sbom/*; do
            binary_name=$(basename $sbom .spdx.json)
            cosign attest --predicate $sbom --type spdx --yes dist/$binary_name
          done


  docker:
    name: Build and Push Multi-Arch Docker Image
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry (GHCR)
        run: |
          mkdir -p $(pwd)/kaniko/.docker
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          cp ~/.docker/config.json $(pwd)/kaniko/.docker/config.json

      - name: Validate Docker Login Configuration
        run: |
          if [ ! -f $(pwd)/kaniko/.docker/config.json ]; then
            echo "❌ Docker config.json file is missing in $(pwd)/kaniko/.docker!"
            exit 1
          fi
          echo "✅ Docker login validated. config.json is correctly placed in $(pwd)/kaniko/.docker."

      - name: Download Built Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
          path: dist/

      - name: Build and Push Docker Image with Kaniko
        run: |
          export IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook"
          export ARCH="${{ matrix.arch }}"
          export FULL_TAG="$IMAGE_NAME:latest-$ARCH"

          docker run --rm \
            --privileged \
            -v $(pwd)/kaniko/.docker:/kaniko/.docker \
            -v "$(pwd)":/workspace \
            -e DOCKER_CONFIG=/kaniko/.docker \
            gcr.io/kaniko-project/executor:latest \
            --context /workspace \
            --dockerfile Dockerfile \
            --custom-platform=linux/$ARCH \
            --build-arg TARGETARCH=$ARCH \
            --destination $FULL_TAG

  manifest:
    name: Create and Push Docker Manifest
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Log in to GitHub Container Registry (GHCR)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Create and Push Multi-Arch Manifest
        run: |
          export IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook"
          export TAG="latest"

          docker manifest create $IMAGE_NAME:$TAG \
            --amend $IMAGE_NAME:$TAG-amd64 \
            --amend $IMAGE_NAME:$TAG-arm64

          docker manifest push $IMAGE_NAME:$TAG

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.0.1"

      - name: Generate Attestation for Docker Image
        run: |
          export IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook:latest"
          export IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_NAME)
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io --username $GITHUB_ACTOR --password-stdin
          cosign attest --predicate attestation.json --type spdx --yes $IMAGE_DIGEST
