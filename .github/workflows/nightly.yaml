name: Nightly Build and Publish

on:
  schedule:
    - cron: "0 0 * * *"  # Runs every night at midnight UTC
  workflow_dispatch:  # Allows manual triggering

permissions:
  actions: write
  attestations: write # Required for Sigstore Cosign
  contents: write
  packages: write
  id-token: write  # Required for Sigstore Cosign


jobs:
  build:
    name: Build and Test Nightly
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 'lts/*'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: |
            viewer-app/package-lock.json
            viewer-app/package.json
      - run: npm install --prefix viewer-app
      - run: npm ci --prefix viewer-app
      - run: npm run build --prefix viewer-app

      - name: Set up Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: '>=1.24'
          cache: true
          cache-dependency-path: |
                "**/*.sum"
                viewer-app/package-lock.json
                viewer-app/package.json

      - name: Install Dependencies
        run: go mod tidy

      - name: Generate Mocks
        run: go generate ./...

      # - name: Golangci-lint
      #   uses: golangci/golangci-lint-action@v6.5.0

      - name: Run Tests
        run: go test -v ./...

      - name: Generate Code Coverage
        run: go test -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Build Nightly Binaries
        run: |
          mkdir -p dist
          DATE_TAG=$(date +'%Y%m%d-%H%M%S')
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/webhook-nightly-${{ matrix.goos }}-${{ matrix.goarch }}-$DATE_TAG .

      - name: Upload Binaries as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nightly-binaries-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.run_id }}
          path: dist/
          if-no-files-found: ignore

  release:
    name: Publish Nightly Binaries
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Built Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: nightly-binaries-*
          merge-multiple: true
          path: dist/

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.4.3"

      - name: Install Syft (for SBOM)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM for Binaries
        run: |
          mkdir -p sbom
          for file in dist/*; do
            syft $file -o spdx-json > sbom/$(basename $file).spdx.json
          done

      - name: Create Git Tag
        id: create_tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          TAG_NAME="nightly-$(date +'%Y%m%d-%H%M%S')"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Publish Release Binaries
        uses: softprops/action-gh-release@v2.2.1
        with:
          files: dist/*
          tag_name: ${{ steps.create_tag.outputs.tag_name }}

      - name: Sign Binaries with Cosign
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io --username $GITHUB_ACTOR --password-stdin
          for file in dist/*; do
            cosign sign --yes $file
          done

      - name: Attest Binaries with Provenance
        run: |
          for file in dist/*; do
            cosign attest --predicate provenance.json --type custom --yes $file
          done

      - name: Attest Binaries with SBOM
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io --username $GITHUB_ACTOR --password-stdin
          for sbom in sbom/*; do
            binary_name=$(basename $sbom .spdx.json)
            cosign attest --predicate $sbom --type spdx --yes dist/$binary_name
          done


  docker:
    name: Build and Push Multi-Arch Nightly Docker Image
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: docker/metadata-action@v5.6.1
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}

      - uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Log in to GitHub Container Registry (GHCR)
      #   run: |
      #     mkdir -p $(pwd)/kaniko/.docker
      #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
      #     cp ~/.docker/config.json $(pwd)/kaniko/.docker/config.json

      # - name: Validate Docker Login Configuration
      #   run: |
      #     if [ ! -f $(pwd)/kaniko/.docker/config.json ]; then
      #       echo "❌ Docker config.json file is missing in $(pwd)/kaniko/.docker!"
      #       exit 1
      #     fi
      #     echo "✅ Docker login validated. config.json is correctly placed in $(pwd)/kaniko/.docker."

      - name: Download Built Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: nightly-binaries-*
          merge-multiple: true
          path: dist/
      - run: ls dist/
      - run: tree dist/

      - uses: int128/kaniko-action@v1.49.0
        with:
          executor: 'gcr.io/kaniko-project/executor:debug'
          push: true
          tags: |
              ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook:${{ github.sha }}-${{ matrix.arch }}
              ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook:nightly-${{ github.sha }}-${{ matrix.arch }}
              ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook:nightly-${{ github.ref_name }}-${{ matrix.arch }}
              ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook:nightly-${{ matrix.arch }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache: true
          cache-repository: ghcr.io/${{ github.repository }}/cache
          build-args: |
            TARGETARCH=${{ matrix.arch }}
          context: /workspace
          # file: Dockerfile
          kaniko-args: |
              --custom-platform=linux/${{ matrix.arch }}


      # - name: Build and Push Nightly Docker Image with Kaniko
      #   run: |
      #     export IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook"
      #     export ARCH="${{ matrix.arch }}"
      #     export FULL_TAG="$IMAGE_NAME:nightly-$ARCH"

      #     docker run --rm \
      #       --privileged \
      #       -v $(pwd)/kaniko/.docker:/kaniko/.docker \
      #       -v "$(pwd)":/workspace \
      #       -e DOCKER_CONFIG=/kaniko/.docker \
      #       gcr.io/kaniko-project/executor:latest \
      #       --context /workspace \
      #       --dockerfile Dockerfile \
      #       --custom-platform=linux/$ARCH \
      #       --build-arg TARGETARCH=$ARCH \
      #       --destination $FULL_TAG

  manifest:
    name: Create and Push Nightly Docker Manifest
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Log in to GitHub Container Registry (GHCR)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Create and Push Multi-Arch Manifest for Nightly
        run: |
          export IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook"
          export TAG="nightly"

          docker manifest create $IMAGE_NAME:$TAG \
            --amend $IMAGE_NAME:$TAG-${{ github.sha }}-amd64 \
            --amend $IMAGE_NAME:$TAG-${{ github.sha }}-arm64

          docker manifest push $IMAGE_NAME:$TAG

          docker manifest create $IMAGE_NAME:$TAG-${{ github.sha }} \
            --amend $IMAGE_NAME:$TAG-${{ github.sha }}-amd64 \
            --amend $IMAGE_NAME:$TAG-${{ github.sha }}-arm64

          docker manifest push $IMAGE_NAME:$TAG-${{ github.sha }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.0.1"

      - name: Generate Attestation for Nightly Docker Image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | cosign login ghcr.io --username $GITHUB_ACTOR --password-stdin
          export IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/ubuntu-autoinstall-webhook:nightly"
          export IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_NAME)
          cosign attest --predicate attestation.json --type spdx --yes $IMAGE_DIGEST
