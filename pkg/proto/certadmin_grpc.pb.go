// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/proto/certadmin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CertAdmin_GetCACertificate_FullMethodName   = "/proto.CertAdmin/GetCACertificate"
	CertAdmin_IssueCertificate_FullMethodName   = "/proto.CertAdmin/IssueCertificate"
	CertAdmin_RevokeCertificate_FullMethodName  = "/proto.CertAdmin/RevokeCertificate"
	CertAdmin_ListCertificates_FullMethodName   = "/proto.CertAdmin/ListCertificates"
	CertAdmin_GetCertificateInfo_FullMethodName = "/proto.CertAdmin/GetCertificateInfo"
)

// CertAdminClient is the client API for CertAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CertAdmin service provides administrative access to the certificate infrastructure
type CertAdminClient interface {
	// GetCACertificate retrieves the CA certificate
	GetCACertificate(ctx context.Context, in *GetCACertificateRequest, opts ...grpc.CallOption) (*GetCACertificateResponse, error)
	// IssueCertificate issues a new certificate based on CSR
	IssueCertificate(ctx context.Context, in *IssueCertificateRequest, opts ...grpc.CallOption) (*IssueCertificateResponse, error)
	// RevokeCertificate revokes an existing certificate
	RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokeCertificateResponse, error)
	// ListCertificates lists all issued certificates
	ListCertificates(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesResponse, error)
	// GetCertificateInfo gets detailed information about a certificate
	GetCertificateInfo(ctx context.Context, in *GetCertificateInfoRequest, opts ...grpc.CallOption) (*GetCertificateInfoResponse, error)
}

type certAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewCertAdminClient(cc grpc.ClientConnInterface) CertAdminClient {
	return &certAdminClient{cc}
}

func (c *certAdminClient) GetCACertificate(ctx context.Context, in *GetCACertificateRequest, opts ...grpc.CallOption) (*GetCACertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCACertificateResponse)
	err := c.cc.Invoke(ctx, CertAdmin_GetCACertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certAdminClient) IssueCertificate(ctx context.Context, in *IssueCertificateRequest, opts ...grpc.CallOption) (*IssueCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueCertificateResponse)
	err := c.cc.Invoke(ctx, CertAdmin_IssueCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certAdminClient) RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokeCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeCertificateResponse)
	err := c.cc.Invoke(ctx, CertAdmin_RevokeCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certAdminClient) ListCertificates(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCertificatesResponse)
	err := c.cc.Invoke(ctx, CertAdmin_ListCertificates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certAdminClient) GetCertificateInfo(ctx context.Context, in *GetCertificateInfoRequest, opts ...grpc.CallOption) (*GetCertificateInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCertificateInfoResponse)
	err := c.cc.Invoke(ctx, CertAdmin_GetCertificateInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertAdminServer is the server API for CertAdmin service.
// All implementations must embed UnimplementedCertAdminServer
// for forward compatibility.
//
// CertAdmin service provides administrative access to the certificate infrastructure
type CertAdminServer interface {
	// GetCACertificate retrieves the CA certificate
	GetCACertificate(context.Context, *GetCACertificateRequest) (*GetCACertificateResponse, error)
	// IssueCertificate issues a new certificate based on CSR
	IssueCertificate(context.Context, *IssueCertificateRequest) (*IssueCertificateResponse, error)
	// RevokeCertificate revokes an existing certificate
	RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokeCertificateResponse, error)
	// ListCertificates lists all issued certificates
	ListCertificates(context.Context, *ListCertificatesRequest) (*ListCertificatesResponse, error)
	// GetCertificateInfo gets detailed information about a certificate
	GetCertificateInfo(context.Context, *GetCertificateInfoRequest) (*GetCertificateInfoResponse, error)
	mustEmbedUnimplementedCertAdminServer()
}

// UnimplementedCertAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCertAdminServer struct{}

func (UnimplementedCertAdminServer) GetCACertificate(context.Context, *GetCACertificateRequest) (*GetCACertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCACertificate not implemented")
}
func (UnimplementedCertAdminServer) IssueCertificate(context.Context, *IssueCertificateRequest) (*IssueCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCertificate not implemented")
}
func (UnimplementedCertAdminServer) RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokeCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (UnimplementedCertAdminServer) ListCertificates(context.Context, *ListCertificatesRequest) (*ListCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (UnimplementedCertAdminServer) GetCertificateInfo(context.Context, *GetCertificateInfoRequest) (*GetCertificateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateInfo not implemented")
}
func (UnimplementedCertAdminServer) mustEmbedUnimplementedCertAdminServer() {}
func (UnimplementedCertAdminServer) testEmbeddedByValue()                   {}

// UnsafeCertAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertAdminServer will
// result in compilation errors.
type UnsafeCertAdminServer interface {
	mustEmbedUnimplementedCertAdminServer()
}

func RegisterCertAdminServer(s grpc.ServiceRegistrar, srv CertAdminServer) {
	// If the following call pancis, it indicates UnimplementedCertAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CertAdmin_ServiceDesc, srv)
}

func _CertAdmin_GetCACertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCACertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertAdminServer).GetCACertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertAdmin_GetCACertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertAdminServer).GetCACertificate(ctx, req.(*GetCACertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertAdmin_IssueCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertAdminServer).IssueCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertAdmin_IssueCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertAdminServer).IssueCertificate(ctx, req.(*IssueCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertAdmin_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertAdminServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertAdmin_RevokeCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertAdminServer).RevokeCertificate(ctx, req.(*RevokeCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertAdmin_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertAdminServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertAdmin_ListCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertAdminServer).ListCertificates(ctx, req.(*ListCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertAdmin_GetCertificateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertAdminServer).GetCertificateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertAdmin_GetCertificateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertAdminServer).GetCertificateInfo(ctx, req.(*GetCertificateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertAdmin_ServiceDesc is the grpc.ServiceDesc for CertAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CertAdmin",
	HandlerType: (*CertAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCACertificate",
			Handler:    _CertAdmin_GetCACertificate_Handler,
		},
		{
			MethodName: "IssueCertificate",
			Handler:    _CertAdmin_IssueCertificate_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _CertAdmin_RevokeCertificate_Handler,
		},
		{
			MethodName: "ListCertificates",
			Handler:    _CertAdmin_ListCertificates_Handler,
		},
		{
			MethodName: "GetCertificateInfo",
			Handler:    _CertAdmin_GetCertificateInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/certadmin.proto",
}
